/*
 * Copyright (c) 2020 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/matrix_transform.h>

/ {
	chosen {
		zmk,kscan = &kscan0;
		zmk,matrix_transform = &default_transform;
	};

	default_transform: keymap_transform_0 {
		compatible = "zmk,matrix-transform";
		columns = <12>;
		rows = <4>;
        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5)  RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)  RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5)  RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)
                        RC(3,3) RC(3,4) RC(3,5)  RC(3,6) RC(3,7) RC(3,8)
        >;
	};

	kscan0: kscan {
		compatible = "zmk,kscan-gpio-matrix";

		diode-direction = "col2row";
		row-gpios
			= <&pro_micro 4 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&pro_micro 5 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&pro_micro 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&pro_micro 7 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			;

	};
};

// // Nice View
// &nice_view_spi {
//     cs-gpios = <&pro_micro 9 GPIO_ACTIVE_HIGH>;
// };

// // The PS/2 GPIO and mouse drivers.
// / {
//     gpio_ps2: gpio_ps2 {
// 		status = "disabled";
//         compatible = "gpio-ps2";

//         // The two bottom left pins of the nice!nano (when it is facing down)
//         scl-gpios = <&pro_micro 1 0>;
//         sda-gpios = <&pro_micro 0 0>;
//     };
// };

&pinctrl {
    spi1_default: spi1_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 6)>,    // D1 / P0.06
                	<NRF_PSEL(SPIM_MOSI, 0, 8)>,   // D0 / P0.08
                	<NRF_PSEL(SPIM_MISO, 0, 27)>;  // Not exposed / P0.27
        };
    };
    spi1_sleep: spi1_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 6)>,    // D1 / P0.06
                	<NRF_PSEL(SPIM_MOSI, 0, 8)>,   // D0 / P0.08
                	<NRF_PSEL(SPIM_MISO, 0, 27)>;  // Not exposed / P0.27
            low-power-enable;
        };
    };
};

ps2_spi: &spi1 {
	status = "disabled";
    compatible = "nordic,nrf-spis";
    pinctrl-0 = <&spi1_default>;
    pinctrl-1 = <&spi1_sleep>;
    pinctrl-names = "default", "sleep";
	def-char = <0x00>;

    spi_ps2: spi-ps2@0 {
        compatible = "spi-ps2";
        spi-max-frequency = <1000000>;
        reg = <0>;
    };
};

/ {
    mouse_ps2: mouse_ps2 {
		status = "disabled";
        compatible = "zmk,mouse-ps2";
        // ps2-device = <&gpio_ps2>;
        ps2-device = <&spi_ps2>;

        // Uncomment this if you have an extra free pin and
        // want the controller to perform the Power-On-Reset
        // instead of using a reset circuit.
        //
        // The bottom right pin of the nice!nano (when it is facing down)
        // rst-gpios = <&pro_micro 9 0>;
    };
};
