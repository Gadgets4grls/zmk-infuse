/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

#define BASE 0
#define NAV 1
#define DEV 2
#define NUM 3
#define SYM 4
#define FUN 5
#define ADJUST 6
#define LOWER 7

// Macros for Auto Mod and Auto Shift behaviors
#define AM(hold_keycode, tap_keycode) &am hold_keycode tap_keycode
#define AS(keycode) &am LS(keycode) keycode

/*
 * Increase layer tap time
 */
&lt {
    tapping-term-ms = <300>;

    // Quickly tap-tap-holding the lt button will repeat the tap behavior
    // For example enter-enter-hold, will output multiple enter while you
    // keep holding the key.
    // But holding enter without double tapping, will activate the layer.
    quick_tap_ms = <200>;
};


/ {

  /*
   * Conditional Layers
   */

  conditional_layers {
      compatible = "zmk,conditional-layers";
      fun_layer {
          if-layers = <NAV NUM>;
          then-layer = <FUN>;
      };

      adjust_layer {
          if-layers = <DEV NUM>;
          then-layer = <ADJUST>;
      };
  };

  behaviors {

    /*
     * Homerow Mods
     */

    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <350>;

      // Quickly tap-tap-holding the homerow button will repeat the tap
      // behavior.
      // For example n-n-hold, will output multiple enwhile you
      // keep holding the key.
      // But holding n without double tapping, will activate the mod.
      quick_tap_ms = <200>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };

    /*
     * Auto Mod
     *
     * Usage: AM(RPAR, LPAR)
     * Hold: )
     * Tap: (
     *
     * --
     *
     * Auto Shift
     *
     * Usage: AS(A)
     * Hold: A (shifted 'a')
     * Tap: a
     */

    am: auto_mod {
      compatible = "zmk,behavior-hold-tap";
      label = "AUTO_MOD";
      #binding-cells = <2>;
      tapping_term_ms = <300>;
      quick_tap_ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };

    /*
     * Tap dancing shift
     *
     * Usage: &td_shift
     * Hold: Shift
     * Double Tap: Caps Word
     * Triple Tap: Caps Lock
     */

    td_shift: tap_dance_0 {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_SHIFT";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&kp RIGHT_SHIFT>, <&caps_word>, <&kp CAPSLOCK>;
    };

    /*
     * Shifted Backspace deletes
     *
     * Usage: &mm_bspc_del
     * Tap: Backspace
     * Shift-Tap: Delete
     */
    mm_bspc_del: bspc_del {
        compatible = "zmk,behavior-mod-morph";
        label = "BACKSPACE_DELETE";
        #binding-cells = <0>;
        bindings = <&kp BSPC>, <&kp DEL>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    /*
     * Shifted Backspace deletes + Layer Tap
     *
     * Usage: &mm_bspc_del_layer
     * Tap: Backspace
     * Shift-Tap: Delete
     * Hold: Switch layer
     */
    mm_bspc_del_layer: bspc_del_layer {
        compatible = "zmk,behavior-mod-morph";
        label = "BACKSPACE_DELETE_LAYER";
        #binding-cells = <0>;
        bindings = <&lt SYM BSPC>, <&kp DEL>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    /*
     * Shifted Space underscores + Layer Tap
     *
     * Usage: &mm_spc_unds_layer
     * Tap: Space
     * Shift-Tap: Underscore
     * Hold: Switch layer
     */
    mm_spc_unds_layer: mod_morph_underscore {
        compatible = "zmk,behavior-mod-morph";
        label = "MM_UNDERSCORE";
        #binding-cells = <0>;
        bindings = <&lt NAV SPACE>, <&kp UNDER>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
  };

  /*
   * Keymap generated using https://www.keymapper.dev/
   * Import sofle_choc_keymap.json to view it.
   */

  keymap {
    compatible = "zmk,keymap";

    Base_layer {
      label = "Base";
      bindings = <
        &kp GRAVE &kp NUMBER_1 &kp NUMBER_2 &kp NUMBER_3 &kp NUMBER_4 &kp NUMBER_5 &kp NUMBER_6 &kp NUMBER_7 &kp NUMBER_8 &kp NUMBER_9 &kp NUMBER_0 &none &kp ESCAPE &kp Q &kp W &kp F &kp P &kp B &kp J &kp L &kp U &kp Y &kp SINGLE_QUOTE &kp SEMICOLON &kp DEL &hm LALT A &hm LCTRL R &hm LGUI S &hm LSHFT T &kp G &kp M &hm RSHFT N &hm RGUI E &hm RCTRL I &hm RALT O &mm_bspc_del &kp LEFT_SHIFT &kp Z &kp X &kp C &kp D &kp V &kp C_MUTE &kp C_PLAY_PAUSE &kp K &kp H &kp COMMA &kp DOT &kp SLASH &td_shift &kp LEFT_ALT &kp LEFT_CONTROL &hm LGUI ESCAPE &mm_spc_unds_layer &lt DEV TAB &mm_bspc_del_layer &lt NUM RETURN &td_shift &kp RIGHT_GUI &kp RIGHT_ALT
      >;
      sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp C_PREV C_NEXT>;
    };

    Nav_layer {
      label = "Nav";
      bindings = <
        &none &none &none &none &none &none &none &none &none &none &none &none &none &kp LG(Q) &kp LG(W) &kp LS(LC(TAB)) &kp LC(TAB) &kp LG(TAB) &kp PG_UP &kp LA(LEFT) &kp UP &kp LA(RIGHT) &none &none &trans &kp LEFT_ALT &kp LEFT_CONTROL &kp LEFT_GUI &kp LEFT_SHIFT &kp LG(GRAVE) &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &none &trans &none &kp LG(Z) &kp LG(X) &kp LG(C) &kp LG(V) &kp LG(V) &trans &trans &none &kp LG(LEFT) &none &kp LG(RIGHT) &none &none &trans &trans &trans &trans &trans &mm_bspc_del &kp RETURN &trans &trans &trans
      >;
      sensor-bindings = <&inc_dec_kp C_BRI_DN C_BRI_UP &inc_dec_kp LEFT RIGHT>;
    };

    Dev_layer {
      label = "Dev";
      bindings = <
        &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &kp TILDE AM(RIGHT_BRACKET, LEFT_BRACKET) &kp AMPERSAND &kp PIPE AS(GRAVE) &none &none &kp LEFT_ALT &kp LEFT_CONTROL &kp LEFT_GUI &kp LEFT_SHIFT &none &kp ASTERISK AM(RIGHT_PARENTHESIS, LEFT_PARENTHESIS) AS(MINUS) AS(EQUAL) &kp HASH &trans &none &none &none &none &none &none &none &none &kp EXCLAMATION AM(RIGHT_BRACE, LEFT_BRACE) &kp SEMICOLON &kp COLON &kp BACKSLASH &none &none &none &none &none &none &kp LA(BACKSPACE) &kp RETURN &none &none &none
      >;
      sensor-bindings = <&inc_dec_kp C_BRI_DN C_BRI_UP &inc_dec_kp LEFT RIGHT>;
    };

    Num_layer {
      label = "Num";
      bindings = <
        &kp F12 &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &none AS(LEFT_BRACKET) AS(N4) AS(N5) AS(N6) AS(RIGHT_BRACKET) &none &none &none &none &none &none &none AS(SEMICOLON) AS(N1) AS(N2) AS(N3) AS(EQUAL) &none &kp RIGHT_SHIFT &kp RIGHT_GUI &kp RIGHT_CONTROL &kp RIGHT_ALT &none &none AS(GRAVE) AS(N7) AS(N8) AS(N9) AS(BACKSLASH) &none &none &none &none &none &none &none &none &none AS(COMMA) AS(DOT) AS(NUMBER_0) AS(MINUS) &none &none &none &none &none
      >;
      sensor-bindings = <&inc_dec_kp C_BRI_DN C_BRI_UP &inc_dec_kp LEFT RIGHT>;
    };

    Sym_layer {
      label = "Sym";
      bindings = <
        &none &none &none &none &none &none &none &none &none &none &none &none &none &kp LEFT_BRACE &kp DOLLAR &kp PERCENT &kp CARET &kp RIGHT_BRACE &none &none &none &none &none &none &none &kp COLON &kp EXCLAMATION &kp AT_SIGN &kp HASH &kp PLUS &none &kp RIGHT_SHIFT &kp RIGHT_GUI &kp RIGHT_CONTROL &kp RIGHT_ALT &none &none &kp TILDE &kp AMPERSAND &kp ASTERISK &kp LEFT_PARENTHESIS &kp PIPE &none &none &none &none &none &none &none &none &none &none &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp UNDERSCORE &none &none &none &none &none
      >;
      sensor-bindings = <&inc_dec_kp C_BRI_DN C_BRI_UP &inc_dec_kp LEFT RIGHT>;
    };

    Fun_layer {
      label = "Fun";
      bindings = <
        &none &none &none &none &none &none &none &none &none &none &none &none &none &none &kp F4 &kp F5 &kp F6 &kp F11 &none &none &none &none &none &none &none &none &kp F1 &kp F2 &kp F3 &kp F10 &none &kp RIGHT_SHIFT &kp RIGHT_GUI &kp RIGHT_CONTROL &kp RIGHT_ALT &none &none &none &kp F7 &kp F8 &kp F9 &kp F12 &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none
      >;
      sensor-bindings = <&inc_dec_kp C_BRI_DN C_BRI_UP &inc_dec_kp LEFT RIGHT>;
    };

    Adjust_layer {
      label = "Adjust";
      bindings = <
        &bt BT_CLR &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_SEL 5 &none &none &none &none &none &none &ext_power EXT_POWER_TOGGLE_CMD &rgb_ug RGB_HUD &rgb_ug RGB_HUI &rgb_ug RGB_SAD &rgb_ug RGB_SAI &rgb_ug RGB_EFF &none &none &none &none &none &none &none &rgb_ug RGB_BRD &rgb_ug RGB_BRI &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &rgb_ug RGB_TOG &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none
      >;
      sensor-bindings = <&inc_dec_kp C_BRI_DN C_BRI_UP &inc_dec_kp LEFT RIGHT>;
    };

    Lower_layer {
      label = "Lower";
      bindings = <
        &none &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp TILDE &kp NUMBER_1 &kp NUMBER_2 &kp NUMBER_3 &kp NUMBER_4 &kp NUMBER_5 &kp NUMBER_6 &kp NUMBER_7 &kp NUMBER_8 &kp NUMBER_9 &kp NUMBER_0 &kp DEL &trans &kp EXCLAMATION &kp AT_SIGN &kp HASH &kp DOLLAR &kp PERCENT &kp CARET &kp AMPERSAND &kp ASTERISK &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp PIPE &trans &kp EQUAL &kp MINUS &kp PLUS &kp LEFT_BRACE &kp RIGHT_BRACE &trans &trans &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp SEMICOLON &kp COLON &kp BACKSLASH &trans &trans &trans &trans &trans &trans &kp DEL &trans &trans &trans &trans
      >;
      sensor-bindings = <&inc_dec_kp C_BRI_DN C_BRI_UP &inc_dec_kp LEFT RIGHT>;
    };
  };
};
